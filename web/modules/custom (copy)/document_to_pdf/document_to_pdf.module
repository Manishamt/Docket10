<?php
error_reporting(E_ALL ^ E_DEPRECATED);
use RtfHtmlPhp\Document;
use RtfHtmlPhp\Html\HtmlFormatter;
use PhpOffice\PhpWord\PhpWord;
use Dompdf\Dompdf;
use Drupal\file\Entity\File;
use Dompdf\Options;
use PhpOffice\PhpWord\IOFactory;
use setasign\Fpdi\Fpdi;
use Setasign\Fpdi\PdfParser;
use Smalot\PdfParser\Parser;




/**
 * Implements hook_init().
 */
function document_to_pdf_init() {
  require_once __DIR__ . '/libraries/FPDI_PDF-Parser-2.1.3_Ioncubed-PHP8.1/src/autoload.php';
}

/**
 * Implements hook_page_attachments_alter().
 */
function document_to_pdf_page_attachments_alter(array &$attachments)
{
  // Check if the user is anonymous.

  // Add CSS to hide the fieldset for anonymous users.
  $attachments['#attached']['library'][] = 'document_to_pdf/hide_fieldset';
}


/**
 * Implements hook_form_alter().
 */
function document_to_pdf_form_alter(&$form, $form_state, $form_id)
{
  if ($form_id === 'node_docket_submission_form') {

    $form['actions']['submit']['#submit'][] = 'document_to_pdf_custom_submit';
  }
}


/**
 * Custom submit handler for the docket_submission node form.
 */
function document_to_pdf_custom_submit($form, &$form_state)
{

  $node = $form_state->getFormObject()->getEntity();
  document_to_pdf_convert_to_pdf($node);
  generate_comment_pdf($node);
  merge_and_save_pdf_files($node);
}



/**
 * Convert files to PDF format. 
 */
function document_to_pdf_convert_to_pdf($node)
{
  $files = $node->get('field_upload_comment_file')->referencedEntities();
  foreach ($files as $file) {
    $mime_type = $file->getMimeType();

    switch ($mime_type) {
      case 'text/plain':
        convert_plain_text_to_pdf($file, $node);
        break;
      case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
        convert_docx_to_pdf($file, $node);
        break;
      case 'application/rtf':
        convert_rtf_text_to_pdf($file, $node);
        break;
      case 'application/pdf':
        save_original_pdf($file, $node);
        break;
      case 'application/msword':
        convert_doc_to_pdf($file, $node);
        break;

      default:
        // Handle other file types if needed.
        break;
    }
  }
}

/**
 * Convert RTF files to PDF.
 *
 * @param \Drupal\file\Entity\File $file The file entity.
 * @param \Drupal\Core\Entity\EntityInterface $node The node entity.
 */
function convert_rtf_text_to_pdf($file, $node)
{
  // Get the MIME type of the file
  $file_mime_type = $file->getMimeType();

  // Check if the MIME type indicates an RTF document
  if ($file_mime_type === 'application/rtf') {
    // Load RTF content from the file.
    $file_content = file_get_contents($file->getFileUri());

    try {
      // Parse the RTF document.
      $document = new Document($file_content);

      // Convert the parse tree to HTML.
      $formatter = new HtmlFormatter();
      $html_content = $formatter->Format($document);

      // Generate PDF from HTML content using Dompdf.
      $dompdf = new Dompdf();
      $dompdf->setPaper('A4', 'portrait');
      $dompdf->loadHtml($html_content);
      $dompdf->render();

      // Save PDF output.
      save_pdf_output($dompdf->output(), $file, $node);
    } catch (\Exception $e) {
      \Drupal::logger('convert_rtf_text_to_pdf')->error('Error converting RTF to PDF: @error', ['@error' => $e->getMessage()]);
      \Drupal::messenger()->addError(t('An error occurred while converting RTF to PDF.'));
    }
  } else {
    // Handle error: file MIME type is not RTF
    \Drupal::logger('convert_rtf_text_to_pdf')->error('Invalid file MIME type. Expected RTF document.');
  }
}



/**
 * Convert DOCX files to PDF.
 */
function convert_docx_to_pdf($file, $node)
{
  try {
    $inputFileName = \Drupal::service('file_system')->realpath($file->getFileUri());
    $phpWord = IOFactory::load($inputFileName, 'Word2007');

    $tempHtmlFile = tempnam(sys_get_temp_dir(), 'word_to_html');
    $xmlWriter = IOFactory::createWriter($phpWord, 'HTML');
    $xmlWriter->save($tempHtmlFile);
    $html_content = file_get_contents($tempHtmlFile);
    unlink($tempHtmlFile);
    $html_content = adjust_image_sizes($html_content, 595, 842);
    $dompdf = new Dompdf();
    $dompdf->loadHtml($html_content);
    $dompdf->setPaper('A4', 'portrait');
    $dompdf->render();
    save_pdf_output($dompdf->output(), $file, $node);
  } catch (Exception $e) {
    die("Error loading DOCX file: " . $e->getMessage());
  }
}


/**
 * Convert MS Word files to PDF.
 */
function convert_doc_to_pdf($file, $node)
{
  $phpWord = IOFactory::load($file->getFileUri(), 'MsDoc');
  $tempHtmlFile = tempnam(sys_get_temp_dir(), 'word_to_html');
  $xmlWriter = IOFactory::createWriter($phpWord, 'HTML');
  $xmlWriter->save($tempHtmlFile);
  $html_content = file_get_contents($tempHtmlFile);
  unlink($tempHtmlFile);
  $dompdf = new Dompdf();
  $dompdf->loadHtml($html_content);
  $dompdf->setPaper('A4', 'portrait');
  $dompdf->render();
  save_pdf_output($dompdf->output(), $file, $node);
}


/**
 * Convert  plain text files to PDF.
 */
function convert_plain_text_to_pdf($file, $node)
{


  $dompdf = new Dompdf();
  $dompdf->setPaper('A4', 'portrait');

  // Load the content of the file for conversion
  $file_content = file_get_contents($file->getFileUri());

  if ($file_content !== false) {
    // Load the file content into Dompdf
    $dompdf->loadHtml($file_content);

    // Render the PDF
    $dompdf->render();

    // Save the PDF output
    save_pdf_output($dompdf->output(), $file, $node);
  } else {
    \Drupal::logger('document_to_pdf')->error('Failed to retrieve file content for conversion to PDF.');
  }
}


/**
 * Save PDF output to file.
 */
function save_pdf_output($pdf_output, $file, $node)
{
  $directory = 'public://';
  $file_system = \Drupal::service('file_system');
  $file_path = $directory . 'converted_file_' . $node->id() . '_' . $file->id() . '.pdf';
  file_put_contents($file_path, $pdf_output);
  $pdf_file = File::create(['uri' => $file_path, 'status' => 1]);
  $pdf_file->save();
  $node->field_uploaded_comment_convert_f[] = $pdf_file->id();
  $node->save();
}


function adjust_image_sizes($html_content, $page_width = 595, $page_height = 842)
{
  // Create a DOMDocument object from the HTML content.
  $dom = new DOMDocument();
  // Suppress errors related to malformed HTML
  libxml_use_internal_errors(true);
  $dom->loadHTML($html_content);
  libxml_clear_errors();

  // Find all image elements in the HTML.
  $images = $dom->getElementsByTagName('img');

  foreach ($images as $image) {
    // Get the inline style attribute
    $style = $image->getAttribute('style');
    // Extract width and height from inline style
    preg_match('/width:\s*(\d+)px;\s*height:\s*(\d+)px;/', $style, $matches);
    // Original width and height
    $original_width = $matches[1] ?? $image->getAttribute('width');
    $original_height = $matches[2] ?? $image->getAttribute('height');

    // Calculate scale factors
    $width_scale = $page_width / $original_width;
    $height_scale = $page_height / $original_height;
    // Choose the smaller scale factor to ensure that the image fits within the page
    $scale_factor = min($width_scale, $height_scale);

    // Calculate the new width and height
    $new_width = $original_width * $scale_factor;
    $new_height = $original_height * $scale_factor;

    // Set the new inline style
    $image->setAttribute('style', "width: {$new_width}px; height: {$new_height}px;");
  }

  // Save the modified HTML content.
  return $dom->saveHTML();
}





/**
 * Save original PDF files and merge into final PDF.
 */
function save_original_pdf($file, $node)
{
  $file_uri = $file->getFileUri();
  $file_extension = pathinfo($file_uri, PATHINFO_EXTENSION);

  // Check if the file is already a PDF
  if (strtolower($file_extension) === 'pdf') {
    // Save the PDF directly to the files directory
    $directory = 'public://';
    $file_system = \Drupal::service('file_system');
    $file_path = $directory . 'original_file_' . $node->id() . '_' . $file->id() . '.pdf';
    $file_system->copy($file_uri, $file_path);
    $pdf_file = File::create(['uri' => $file_path, 'status' => 1]);
    $pdf_file->save();

    // Add the PDF file to the merge process
    merge_and_save_pdf_files($node);
  }
}


/**
 * Generate PDF containing comment fields.
 */
function generate_comment_pdf($node)
{
  $request = \Drupal::request();

  // Check if the title parameter exists in the URL.
  // $title = $request->query->get('title');
  $docket_item_entity = $node->get('field_docksub_docket_item')->entity;
  // Get the title or any other relevant information from the Docket Item entity.
  $docket_item_title = !empty($docket_item_entity) ? $docket_item_entity->label() : '';

  $name = $node->get('field_docksub_name_publish')->value;
  $email = $node->get('field_docksub_email')->value;
  $created = $node->get('created')->value;
  $formatted_created = \Drupal::service('date.formatter')->format($created, 'custom', 'm/d/Y - g:i a');
  $comment = $node->get('field_body')->value;

  $phpWord = new PhpWord();
  $section = $phpWord->addSection();
  $section->addText("<h1> $docket_item_title </h1>");
  $section->addText("Published Name  : <br> $name");
  $section->addText("Email: <br> $email");
  $section->addText("Post date: <br> $formatted_created");
  $section->addText("Comment:<br> $comment");

  try {
    $options = new Options();
    $options->set('isHtml5ParserEnabled', true);
    $dompdf = new Dompdf($options);

    // Save PhpWord content to HTML
    $tempHtmlFile = tempnam(sys_get_temp_dir(), 'phpword_to_html');
    $xmlWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, 'HTML');
    $xmlWriter->save($tempHtmlFile);
    $htmlContent = file_get_contents($tempHtmlFile);
    unlink($tempHtmlFile);

    $dompdf->loadHtml($htmlContent);
    $dompdf->setPaper('A4', 'portrait');
    $dompdf->render();
    $pdfContent = $dompdf->output();

    $pdfFilePath = 'public://commentfields_' . $node->id() . '.pdf';
    file_put_contents($pdfFilePath, $pdfContent);

    $file = File::create([
      'uri' => $pdfFilePath,
    ]);
    $file->save();

    $node->field_comment_saved_as_pdf_file->setValue(['target_id' => $file->id()]);
    $node->save();




    \Drupal::messenger()->addMessage(t('PDF file generated successfully for node ID: @nid', ['@nid' => $node->id()]));
  } catch (\Exception $e) {
    // Log error.
    \Drupal::logger('document_to_pdf')->error('Error generating PDF: @error', ['@error' => $e->getMessage()]);
    // Add error message.
    \Drupal::messenger()->addError(t('An error occurred while generating PDF: @error', ['@error' => $e->getMessage()]));
  }
}


/**
 * Merge all generated PDF files and save into field_docksub_final_pdf field.
 */
function merge_and_save_pdf_files($node)
{
  // Fetch referenced entities from both fields
  $pdf_files_1 = $node->get('field_comment_saved_as_pdf_file')->referencedEntities();
  $pdf_files_2 = $node->get('field_uploaded_comment_convert_f')->referencedEntities();
  $pdf_files_3 = $node->get('field_upload_comment_file')->referencedEntities();

  // Merge entities from both fields
  $pdf_files = array_merge($pdf_files_1, $pdf_files_2);
  foreach ($pdf_files_3 as $pdf_file) {
    if ($pdf_file->getMimeType() === 'application/pdf') {
      $pdf_files[] = $pdf_file;
    }
  }
  // Initialize FPDI
  $pdf = new \setasign\Fpdi\Fpdi();
  // $pdf = new Fpdi();
  // $pdf =new PdfParser();
  // $pdf = new Setasign\Fpdi\PdfParser\PdfParser;

  foreach ($pdf_files as $pdf_file) {
    $pdf_file_uri = $pdf_file->getFileUri();
    $pageCount = $pdf->setSourceFile($pdf_file_uri);


    for ($pageNum = 1; $pageNum <= $pageCount; $pageNum++) {
      $templateId = $pdf->importPage($pageNum);
      $size = $pdf->getTemplateSize($templateId);
      $height = $size['height'] + 100;
      $width = $size['width'] + 100;
      $pdf->AddPage('P', [$width, $height]);
      $pdf->useTemplate($templateId);
    }
  }

  // Save merged PDF content to a new PDF file.
  $directory = 'public://';
  $file_path = $directory . 'merged_file_' . $node->id() . '.pdf';
  $pdf->Output($file_path, 'F');

  $pdf_file = File::create(['uri' => $file_path, 'status' => 1]);
  $pdf_file->save();

  $node->set('field_final_pdf_file', ['target_id' => $pdf_file->id(), 'display' => 1]);
  $node->save();
}
